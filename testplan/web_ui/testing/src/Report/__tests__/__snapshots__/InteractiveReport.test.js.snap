// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InteractiveReport Handles environment being started 1`] = `
<div
  className=""
>
  <Toolbar
    expandStatus="default"
    extraButtons={
      Array [
        <ReloadButton
          reloadCbk={[Function]}
          reloading={false}
        />,
        <ResetButton
          resetStateCbk={[Function]}
          resetting={false}
        />,
        <AbortButton
          abortCbk={[Function]}
          aborting={false}
        />,
        <SaveButton />,
      ]
    }
    filterBoxWidth="28em"
    filterText={null}
    handleNavFilter={[Function]}
    status="unknown"
    updateEmptyDisplayFunc={[Function]}
    updateExpandStatusFunc={[Function]}
    updateFilterFunc={[Function]}
    updatePathDisplayFunc={[Function]}
    updateTagsDisplayFunc={[Function]}
    updateTimeDisplayFunc={[Function]}
    updateTreeViewFunc={[Function]}
  />
  <Nav
    displayEmpty={true}
    displayTags={false}
    displayTime={false}
    envCtrlCallback={[Function]}
    filter={null}
    handleClick={[Function]}
    handleColumnResizing={[Function]}
    interactive={true}
    navListWidth="28em"
    report={null}
    selected={Array []}
    treeView={true}
    url="/interactive/:uid/:selection*"
  />
  <ContextProvider
    value={
      Object {
        "assertions": Object {},
        "globalExpand": Object {
          "status": "default",
          "time": 0,
        },
        "updateAssertionStatus": [Function],
        "updateGlobalExpand": [Function],
      }
    }
  >
    <Message
      left="28em"
      message="Please select an entry."
    />
  </ContextProvider>
</div>
`;

exports[`InteractiveReport Loads report skeleton when mounted 1`] = `[Function]`;

exports[`InteractiveReport Parially refreshes the report on update. 1`] = `
<div
  className=""
>
  <Toolbar
    expandStatus="default"
    extraButtons={
      Array [
        <ReloadButton
          reloadCbk={[Function]}
          reloading={false}
        />,
        <ResetButton
          resetStateCbk={[Function]}
          resetting={false}
        />,
        <AbortButton
          abortCbk={[Function]}
          aborting={false}
        />,
        <SaveButton />,
      ]
    }
    filterBoxWidth="28em"
    filterText={null}
    handleNavFilter={[Function]}
    status="unknown"
    updateEmptyDisplayFunc={[Function]}
    updateExpandStatusFunc={[Function]}
    updateFilterFunc={[Function]}
    updatePathDisplayFunc={[Function]}
    updateTagsDisplayFunc={[Function]}
    updateTimeDisplayFunc={[Function]}
    updateTreeViewFunc={[Function]}
  />
  <Nav
    displayEmpty={true}
    displayTags={false}
    displayTime={false}
    envCtrlCallback={[Function]}
    filter={null}
    handleClick={[Function]}
    handleColumnResizing={[Function]}
    interactive={true}
    navListWidth="28em"
    report={null}
    selected={Array []}
    treeView={true}
    url="/interactive/:uid/:selection*"
  />
  <ContextProvider
    value={
      Object {
        "assertions": Object {},
        "globalExpand": Object {
          "status": "default",
          "time": 0,
        },
        "updateAssertionStatus": [Function],
        "updateGlobalExpand": [Function],
      }
    }
  >
    <Message
      left="28em"
      message="Please select an entry."
    />
  </ContextProvider>
</div>
`;

exports[`InteractiveReport Updates testcase state 1`] = `
<div
  className=""
>
  <Toolbar
    expandStatus="default"
    extraButtons={
      Array [
        <ReloadButton
          reloadCbk={[Function]}
          reloading={false}
        />,
        <ResetButton
          resetStateCbk={[Function]}
          resetting={false}
        />,
        <AbortButton
          abortCbk={[Function]}
          aborting={false}
        />,
        <SaveButton />,
      ]
    }
    filterBoxWidth="28em"
    filterText={null}
    handleNavFilter={[Function]}
    status="unknown"
    updateEmptyDisplayFunc={[Function]}
    updateExpandStatusFunc={[Function]}
    updateFilterFunc={[Function]}
    updatePathDisplayFunc={[Function]}
    updateTagsDisplayFunc={[Function]}
    updateTimeDisplayFunc={[Function]}
    updateTreeViewFunc={[Function]}
  />
  <Nav
    displayEmpty={true}
    displayTags={false}
    displayTime={false}
    envCtrlCallback={[Function]}
    filter={null}
    handleClick={[Function]}
    handleColumnResizing={[Function]}
    interactive={true}
    navListWidth="28em"
    report={
      Object {
        "attachments": Object {},
        "category": "testplan",
        "entries": Array [
          Object {
            "category": "multitest",
            "description": null,
            "entries": Array [
              Object {
                "category": "testsuite",
                "description": null,
                "entries": Array [
                  Object {
                    "category": "testcase",
                    "description": null,
                    "entries": Array [],
                    "hash": 44444,
                    "logs": Array [],
                    "name": "testcaseName",
                    "name_type_index": Array [
                      "testcaseName|testcase",
                      "SuiteName|testsuite",
                      "MultitestName|multitest",
                      "TestplanName|testplan",
                    ],
                    "parent_uids": Array [
                      "TestplanUID",
                      "MultitestUID",
                      "SuiteUID",
                    ],
                    "runtime_status": "running",
                    "status": "ready",
                    "status_override": null,
                    "suite_related": false,
                    "tags": Object {},
                    "tags_index": Object {},
                    "timer": Object {},
                    "type": "TestCaseReport",
                    "uid": "TestcaseUID",
                    "uids": Array [
                      "TestplanUID",
                      "MultitestUID",
                      "SuiteUID",
                      "TestcaseUID",
                    ],
                  },
                ],
                "entry_uids": Array [
                  "test_basic_assertions",
                ],
                "fix_spec_path": null,
                "hash": 33333,
                "name": "SuiteName",
                "name_type_index": Array [
                  "SuiteName|testsuite",
                  "MultitestName|multitest",
                  "TestplanName|testplan",
                  "testcaseName|testcase",
                ],
                "parent_uids": Array [
                  "TestplanUID",
                  "MultitestUID",
                ],
                "part": null,
                "runtime_status": "ready",
                "status": "running",
                "status_override": null,
                "tags": Object {},
                "tags_index": Object {},
                "timer": Object {},
                "uid": "SuiteUID",
                "uids": Array [
                  "TestplanUID",
                  "MultitestUID",
                  "SuiteUID",
                ],
              },
            ],
            "entry_uids": Array [
              "SuiteUID",
            ],
            "fix_spec_path": null,
            "hash": 22222,
            "name": "MultitestName",
            "name_type_index": Array [
              "MultitestName|multitest",
              "TestplanName|testplan",
              "SuiteName|testsuite",
              "testcaseName|testcase",
            ],
            "parent_uids": Array [
              "TestplanUID",
            ],
            "part": null,
            "runtime_status": "running",
            "status": "ready",
            "status_override": null,
            "tags": Object {},
            "tags_index": Object {},
            "timer": Object {},
            "uid": "MultitestUID",
            "uids": Array [
              "TestplanUID",
              "MultitestUID",
            ],
          },
        ],
        "entry_uids": Array [
          "MultitestUID",
        ],
        "hash": 11111,
        "meta": Object {},
        "name": "TestplanName",
        "name_type_index": Array [
          "TestplanName|testplan",
          "MultitestName|multitest",
          "SuiteName|testsuite",
          "testcaseName|testcase",
        ],
        "parent_uids": Array [],
        "runtime_status": "running",
        "status": "unknown",
        "status_override": null,
        "tags_index": Object {},
        "timer": Object {},
        "uid": "TestplanUID",
        "uids": Array [
          "TestplanUID",
        ],
      }
    }
    selected={
      Array [
        Object {
          "attachments": Object {},
          "category": "testplan",
          "entries": Array [
            Object {
              "category": "multitest",
              "description": null,
              "entries": Array [
                Object {
                  "category": "testsuite",
                  "description": null,
                  "entries": Array [
                    Object {
                      "category": "testcase",
                      "description": null,
                      "entries": Array [],
                      "hash": 44444,
                      "logs": Array [],
                      "name": "testcaseName",
                      "name_type_index": Array [
                        "testcaseName|testcase",
                        "SuiteName|testsuite",
                        "MultitestName|multitest",
                        "TestplanName|testplan",
                      ],
                      "parent_uids": Array [
                        "TestplanUID",
                        "MultitestUID",
                        "SuiteUID",
                      ],
                      "runtime_status": "running",
                      "status": "ready",
                      "status_override": null,
                      "suite_related": false,
                      "tags": Object {},
                      "tags_index": Object {},
                      "timer": Object {},
                      "type": "TestCaseReport",
                      "uid": "TestcaseUID",
                      "uids": Array [
                        "TestplanUID",
                        "MultitestUID",
                        "SuiteUID",
                        "TestcaseUID",
                      ],
                    },
                  ],
                  "entry_uids": Array [
                    "test_basic_assertions",
                  ],
                  "fix_spec_path": null,
                  "hash": 33333,
                  "name": "SuiteName",
                  "name_type_index": Array [
                    "SuiteName|testsuite",
                    "MultitestName|multitest",
                    "TestplanName|testplan",
                    "testcaseName|testcase",
                  ],
                  "parent_uids": Array [
                    "TestplanUID",
                    "MultitestUID",
                  ],
                  "part": null,
                  "runtime_status": "ready",
                  "status": "running",
                  "status_override": null,
                  "tags": Object {},
                  "tags_index": Object {},
                  "timer": Object {},
                  "uid": "SuiteUID",
                  "uids": Array [
                    "TestplanUID",
                    "MultitestUID",
                    "SuiteUID",
                  ],
                },
              ],
              "entry_uids": Array [
                "SuiteUID",
              ],
              "fix_spec_path": null,
              "hash": 22222,
              "name": "MultitestName",
              "name_type_index": Array [
                "MultitestName|multitest",
                "TestplanName|testplan",
                "SuiteName|testsuite",
                "testcaseName|testcase",
              ],
              "parent_uids": Array [
                "TestplanUID",
              ],
              "part": null,
              "runtime_status": "running",
              "status": "ready",
              "status_override": null,
              "tags": Object {},
              "tags_index": Object {},
              "timer": Object {},
              "uid": "MultitestUID",
              "uids": Array [
                "TestplanUID",
                "MultitestUID",
              ],
            },
          ],
          "entry_uids": Array [
            "MultitestUID",
          ],
          "hash": 11111,
          "meta": Object {},
          "name": "TestplanName",
          "name_type_index": Array [
            "TestplanName|testplan",
            "MultitestName|multitest",
            "SuiteName|testsuite",
            "testcaseName|testcase",
          ],
          "parent_uids": Array [],
          "runtime_status": "running",
          "status": "unknown",
          "status_override": null,
          "tags_index": Object {},
          "timer": Object {},
          "uid": "TestplanUID",
          "uids": Array [
            "TestplanUID",
          ],
        },
      ]
    }
    treeView={true}
    url="/interactive/:uid/:selection*"
  />
  <ContextProvider
    value={
      Object {
        "assertions": Object {},
        "globalExpand": Object {
          "status": "default",
          "time": 0,
        },
        "updateAssertionStatus": [Function],
        "updateGlobalExpand": [Function],
      }
    }
  >
    <Message
      left="28em"
      message="Please select an entry."
    />
  </ContextProvider>
</div>
`;

exports[`InteractiveReport handles individual parametrizations being run 1`] = `
<div
  className=""
>
  <Toolbar
    expandStatus="default"
    extraButtons={
      Array [
        <ReloadButton
          reloadCbk={[Function]}
          reloading={false}
        />,
        <ResetButton
          resetStateCbk={[Function]}
          resetting={false}
        />,
        <AbortButton
          abortCbk={[Function]}
          aborting={false}
        />,
        <SaveButton />,
      ]
    }
    filterBoxWidth="28em"
    filterText={null}
    handleNavFilter={[Function]}
    status="unknown"
    updateEmptyDisplayFunc={[Function]}
    updateExpandStatusFunc={[Function]}
    updateFilterFunc={[Function]}
    updatePathDisplayFunc={[Function]}
    updateTagsDisplayFunc={[Function]}
    updateTimeDisplayFunc={[Function]}
    updateTreeViewFunc={[Function]}
  />
  <Nav
    displayEmpty={true}
    displayTags={false}
    displayTime={false}
    envCtrlCallback={[Function]}
    filter={null}
    handleClick={[Function]}
    handleColumnResizing={[Function]}
    interactive={true}
    navListWidth="28em"
    report={null}
    selected={Array []}
    treeView={true}
    url="/interactive/:uid/:selection*"
  />
  <ContextProvider
    value={
      Object {
        "assertions": Object {},
        "globalExpand": Object {
          "status": "default",
          "time": 0,
        },
        "updateAssertionStatus": [Function],
        "updateGlobalExpand": [Function],
      }
    }
  >
    <Message
      left="28em"
      message="Please select an entry."
    />
  </ContextProvider>
</div>
`;

exports[`InteractiveReport handles individual test suites being run 1`] = `
<div
  className=""
>
  <Toolbar
    expandStatus="default"
    extraButtons={
      Array [
        <ReloadButton
          reloadCbk={[Function]}
          reloading={false}
        />,
        <ResetButton
          resetStateCbk={[Function]}
          resetting={false}
        />,
        <AbortButton
          abortCbk={[Function]}
          aborting={false}
        />,
        <SaveButton />,
      ]
    }
    filterBoxWidth="28em"
    filterText={null}
    handleNavFilter={[Function]}
    status="unknown"
    updateEmptyDisplayFunc={[Function]}
    updateExpandStatusFunc={[Function]}
    updateFilterFunc={[Function]}
    updatePathDisplayFunc={[Function]}
    updateTagsDisplayFunc={[Function]}
    updateTimeDisplayFunc={[Function]}
    updateTreeViewFunc={[Function]}
  />
  <Nav
    displayEmpty={true}
    displayTags={false}
    displayTime={false}
    envCtrlCallback={[Function]}
    filter={null}
    handleClick={[Function]}
    handleColumnResizing={[Function]}
    interactive={true}
    navListWidth="28em"
    report={null}
    selected={Array []}
    treeView={true}
    url="/interactive/:uid/:selection*"
  />
  <ContextProvider
    value={
      Object {
        "assertions": Object {},
        "globalExpand": Object {
          "status": "default",
          "time": 0,
        },
        "updateAssertionStatus": [Function],
        "updateGlobalExpand": [Function],
      }
    }
  >
    <Message
      left="28em"
      message="Please select an entry."
    />
  </ContextProvider>
</div>
`;

exports[`InteractiveReport handles individual testcases being run 1`] = `
<div
  className=""
>
  <Toolbar
    expandStatus="default"
    extraButtons={
      Array [
        <ReloadButton
          reloadCbk={[Function]}
          reloading={false}
        />,
        <ResetButton
          resetStateCbk={[Function]}
          resetting={false}
        />,
        <AbortButton
          abortCbk={[Function]}
          aborting={false}
        />,
        <SaveButton />,
      ]
    }
    filterBoxWidth="28em"
    filterText={null}
    handleNavFilter={[Function]}
    status="unknown"
    updateEmptyDisplayFunc={[Function]}
    updateExpandStatusFunc={[Function]}
    updateFilterFunc={[Function]}
    updatePathDisplayFunc={[Function]}
    updateTagsDisplayFunc={[Function]}
    updateTimeDisplayFunc={[Function]}
    updateTreeViewFunc={[Function]}
  />
  <Nav
    displayEmpty={true}
    displayTags={false}
    displayTime={false}
    envCtrlCallback={[Function]}
    filter={null}
    handleClick={[Function]}
    handleColumnResizing={[Function]}
    interactive={true}
    navListWidth="28em"
    report={null}
    selected={Array []}
    treeView={true}
    url="/interactive/:uid/:selection*"
  />
  <ContextProvider
    value={
      Object {
        "assertions": Object {},
        "globalExpand": Object {
          "status": "default",
          "time": 0,
        },
        "updateAssertionStatus": [Function],
        "updateGlobalExpand": [Function],
      }
    }
  >
    <Message
      left="28em"
      message="Please select an entry."
    />
  </ContextProvider>
</div>
`;

exports[`InteractiveReport handles tests being run 1`] = `
<div
  className=""
>
  <Toolbar
    expandStatus="default"
    extraButtons={
      Array [
        <ReloadButton
          reloadCbk={[Function]}
          reloading={false}
        />,
        <ResetButton
          resetStateCbk={[Function]}
          resetting={false}
        />,
        <AbortButton
          abortCbk={[Function]}
          aborting={false}
        />,
        <SaveButton />,
      ]
    }
    filterBoxWidth="28em"
    filterText={null}
    handleNavFilter={[Function]}
    status="unknown"
    updateEmptyDisplayFunc={[Function]}
    updateExpandStatusFunc={[Function]}
    updateFilterFunc={[Function]}
    updatePathDisplayFunc={[Function]}
    updateTagsDisplayFunc={[Function]}
    updateTimeDisplayFunc={[Function]}
    updateTreeViewFunc={[Function]}
  />
  <Nav
    displayEmpty={true}
    displayTags={false}
    displayTime={false}
    envCtrlCallback={[Function]}
    filter={null}
    handleClick={[Function]}
    handleColumnResizing={[Function]}
    interactive={true}
    navListWidth="28em"
    report={null}
    selected={Array []}
    treeView={true}
    url="/interactive/:uid/:selection*"
  />
  <ContextProvider
    value={
      Object {
        "assertions": Object {},
        "globalExpand": Object {
          "status": "default",
          "time": 0,
        },
        "updateAssertionStatus": [Function],
        "updateGlobalExpand": [Function],
      }
    }
  >
    <Message
      left="28em"
      message="Please select an entry."
    />
  </ContextProvider>
</div>
`;
